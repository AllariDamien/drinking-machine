/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.defaultsm;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;

public class DefaultSMStatemachine implements IDefaultSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private boolean coinSlot;
		
		private long coinSlotValue;
		
		
		public void raiseCoinSlot(long value) {
			coinSlotValue = value;
			coinSlot = true;
		}
		protected long getCoinSlotValue() {
			if (! coinSlot ) 
				throw new IllegalStateException("Illegal event value access. Event CoinSlot is not raised!");
			return coinSlotValue;
		}
		
		private boolean nFC;
		
		
		public void raiseNFC() {
			nFC = true;
		}
		
		private boolean selectType;
		
		private long selectTypeValue;
		
		
		public void raiseSelectType(long value) {
			selectTypeValue = value;
			selectType = true;
		}
		protected long getSelectTypeValue() {
			if (! selectType ) 
				throw new IllegalStateException("Illegal event value access. Event SelectType is not raised!");
			return selectTypeValue;
		}
		
		private boolean sliderSugar;
		
		private long sliderSugarValue;
		
		
		public void raiseSliderSugar(long value) {
			sliderSugarValue = value;
			sliderSugar = true;
		}
		protected long getSliderSugarValue() {
			if (! sliderSugar ) 
				throw new IllegalStateException("Illegal event value access. Event SliderSugar is not raised!");
			return sliderSugarValue;
		}
		
		private boolean sliderSize;
		
		private long sliderSizeValue;
		
		
		public void raiseSliderSize(long value) {
			sliderSizeValue = value;
			sliderSize = true;
		}
		protected long getSliderSizeValue() {
			if (! sliderSize ) 
				throw new IllegalStateException("Illegal event value access. Event SliderSize is not raised!");
			return sliderSizeValue;
		}
		
		private boolean sliderTemperature;
		
		private long sliderTemperatureValue;
		
		
		public void raiseSliderTemperature(long value) {
			sliderTemperatureValue = value;
			sliderTemperature = true;
		}
		protected long getSliderTemperatureValue() {
			if (! sliderTemperature ) 
				throw new IllegalStateException("Illegal event value access. Event SliderTemperature is not raised!");
			return sliderTemperatureValue;
		}
		
		private boolean cancelButton;
		
		
		public void raiseCancelButton() {
			cancelButton = true;
		}
		
		private boolean drinkCollected;
		
		
		public void raiseDrinkCollected() {
			drinkCollected = true;
		}
		
		private boolean preparationFinished;
		
		
		public void raisePreparationFinished() {
			preparationFinished = true;
		}
		
		private boolean doUpdateAmountMoney;
		
		private long doUpdateAmountMoneyValue;
		
		
		public boolean isRaisedDoUpdateAmountMoney() {
			return doUpdateAmountMoney;
		}
		
		protected void raiseDoUpdateAmountMoney(long value) {
			doUpdateAmountMoneyValue = value;
			doUpdateAmountMoney = true;
		}
		
		public long getDoUpdateAmountMoneyValue() {
			if (! doUpdateAmountMoney ) 
				throw new IllegalStateException("Illegal event value access. Event DoUpdateAmountMoney is not raised!");
			return doUpdateAmountMoneyValue;
		}
		
		private boolean doTypeSelection;
		
		private long doTypeSelectionValue;
		
		
		public boolean isRaisedDoTypeSelection() {
			return doTypeSelection;
		}
		
		protected void raiseDoTypeSelection(long value) {
			doTypeSelectionValue = value;
			doTypeSelection = true;
		}
		
		public long getDoTypeSelectionValue() {
			if (! doTypeSelection ) 
				throw new IllegalStateException("Illegal event value access. Event DoTypeSelection is not raised!");
			return doTypeSelectionValue;
		}
		
		private boolean doSaveInformations;
		
		
		public boolean isRaisedDoSaveInformations() {
			return doSaveInformations;
		}
		
		protected void raiseDoSaveInformations() {
			doSaveInformations = true;
		}
		
		private boolean doReset;
		
		
		public boolean isRaisedDoReset() {
			return doReset;
		}
		
		protected void raiseDoReset() {
			doReset = true;
		}
		
		private boolean doRefoundMoney;
		
		
		public boolean isRaisedDoRefoundMoney() {
			return doRefoundMoney;
		}
		
		protected void raiseDoRefoundMoney() {
			doRefoundMoney = true;
		}
		
		private boolean doStartingPreparation;
		
		
		public boolean isRaisedDoStartingPreparation() {
			return doStartingPreparation;
		}
		
		protected void raiseDoStartingPreparation() {
			doStartingPreparation = true;
		}
		
		private boolean doCleanSystem;
		
		
		public boolean isRaisedDoCleanSystem() {
			return doCleanSystem;
		}
		
		protected void raiseDoCleanSystem() {
			doCleanSystem = true;
		}
		
		private boolean doDrinkCollectable;
		
		
		public boolean isRaisedDoDrinkCollectable() {
			return doDrinkCollectable;
		}
		
		protected void raiseDoDrinkCollectable() {
			doDrinkCollectable = true;
		}
		
		private long balance;
		
		public long getBalance() {
			return balance;
		}
		
		public void setBalance(long value) {
			this.balance = value;
		}
		
		private long price;
		
		public long getPrice() {
			return price;
		}
		
		public void setPrice(long value) {
			this.price = value;
		}
		
		protected void clearEvents() {
			coinSlot = false;
			nFC = false;
			selectType = false;
			sliderSugar = false;
			sliderSize = false;
			sliderTemperature = false;
			cancelButton = false;
			drinkCollected = false;
			preparationFinished = false;
		}
		protected void clearOutEvents() {
		
		doUpdateAmountMoney = false;
		doTypeSelection = false;
		doSaveInformations = false;
		doReset = false;
		doRefoundMoney = false;
		doStartingPreparation = false;
		doCleanSystem = false;
		doDrinkCollectable = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Ready,
		main_region_Cancellable,
		main_region_Cancellable_Drink_Drink_Selection,
		main_region_Cancellable_Payment_Payment_Selection_,
		main_region_Cancellable_Payment_Payed,
		main_region_Cancellable_Payment_Coins,
		main_region_Cancellable_Timer_Timer,
		main_region_Preparation,
		main_region_Drink_available,
		$NullState$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[1];
	
	public DefaultSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setBalance(0);
		
		sCInterface.setPrice(-1);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Ready:
				main_region_Ready_react(true);
				break;
			case main_region_Cancellable_Drink_Drink_Selection:
				main_region_Cancellable_Drink_Drink_Selection_react(true);
				break;
			case main_region_Cancellable_Payment_Payment_Selection_:
				main_region_Cancellable_Payment_Payment_Selection__react(true);
				break;
			case main_region_Cancellable_Payment_Payed:
				main_region_Cancellable_Payment_Payed_react(true);
				break;
			case main_region_Cancellable_Payment_Coins:
				main_region_Cancellable_Payment_Coins_react(true);
				break;
			case main_region_Cancellable_Timer_Timer:
				main_region_Cancellable_Timer_Timer_react(true);
				break;
			case main_region_Preparation:
				main_region_Preparation_react(true);
				break;
			case main_region_Drink_available:
				main_region_Drink_available_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Ready:
			return stateVector[0] == State.main_region_Ready;
		case main_region_Cancellable:
			return stateVector[0].ordinal() >= State.
					main_region_Cancellable.ordinal()&& stateVector[0].ordinal() <= State.main_region_Cancellable_Timer_Timer.ordinal();
		case main_region_Cancellable_Drink_Drink_Selection:
			return stateVector[0] == State.main_region_Cancellable_Drink_Drink_Selection;
		case main_region_Cancellable_Payment_Payment_Selection_:
			return stateVector[1] == State.main_region_Cancellable_Payment_Payment_Selection_;
		case main_region_Cancellable_Payment_Payed:
			return stateVector[1] == State.main_region_Cancellable_Payment_Payed;
		case main_region_Cancellable_Payment_Coins:
			return stateVector[1] == State.main_region_Cancellable_Payment_Coins;
		case main_region_Cancellable_Timer_Timer:
			return stateVector[2] == State.main_region_Cancellable_Timer_Timer;
		case main_region_Preparation:
			return stateVector[0] == State.main_region_Preparation;
		case main_region_Drink_available:
			return stateVector[0] == State.main_region_Drink_available;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseCoinSlot(long value) {
		sCInterface.raiseCoinSlot(value);
	}
	
	public void raiseNFC() {
		sCInterface.raiseNFC();
	}
	
	public void raiseSelectType(long value) {
		sCInterface.raiseSelectType(value);
	}
	
	public void raiseSliderSugar(long value) {
		sCInterface.raiseSliderSugar(value);
	}
	
	public void raiseSliderSize(long value) {
		sCInterface.raiseSliderSize(value);
	}
	
	public void raiseSliderTemperature(long value) {
		sCInterface.raiseSliderTemperature(value);
	}
	
	public void raiseCancelButton() {
		sCInterface.raiseCancelButton();
	}
	
	public void raiseDrinkCollected() {
		sCInterface.raiseDrinkCollected();
	}
	
	public void raisePreparationFinished() {
		sCInterface.raisePreparationFinished();
	}
	
	public boolean isRaisedDoUpdateAmountMoney() {
		return sCInterface.isRaisedDoUpdateAmountMoney();
	}
	
	public long getDoUpdateAmountMoneyValue() {
		return sCInterface.getDoUpdateAmountMoneyValue();
	}
	
	public boolean isRaisedDoTypeSelection() {
		return sCInterface.isRaisedDoTypeSelection();
	}
	
	public long getDoTypeSelectionValue() {
		return sCInterface.getDoTypeSelectionValue();
	}
	
	public boolean isRaisedDoSaveInformations() {
		return sCInterface.isRaisedDoSaveInformations();
	}
	
	public boolean isRaisedDoReset() {
		return sCInterface.isRaisedDoReset();
	}
	
	public boolean isRaisedDoRefoundMoney() {
		return sCInterface.isRaisedDoRefoundMoney();
	}
	
	public boolean isRaisedDoStartingPreparation() {
		return sCInterface.isRaisedDoStartingPreparation();
	}
	
	public boolean isRaisedDoCleanSystem() {
		return sCInterface.isRaisedDoCleanSystem();
	}
	
	public boolean isRaisedDoDrinkCollectable() {
		return sCInterface.isRaisedDoDrinkCollectable();
	}
	
	public long getBalance() {
		return sCInterface.getBalance();
	}
	
	public void setBalance(long value) {
		sCInterface.setBalance(value);
	}
	
	public long getPrice() {
		return sCInterface.getPrice();
	}
	
	public void setPrice(long value) {
		sCInterface.setPrice(value);
	}
	
	/* Entry action for state 'Timer'. */
	private void entryAction_main_region_Cancellable_Timer_Timer() {
		timer.setTimer(this, 0, (45 * 1000), false);
	}
	
	/* Exit action for state 'Timer'. */
	private void exitAction_main_region_Cancellable_Timer_Timer() {
		timer.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state Ready */
	private void enterSequence_main_region_Ready_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Ready;
	}
	
	/* 'default' enter sequence for state Cancellable */
	private void enterSequence_main_region_Cancellable_default() {
		enterSequence_main_region_Cancellable_Drink_default();
		enterSequence_main_region_Cancellable_Payment_default();
		enterSequence_main_region_Cancellable_Timer_default();
	}
	
	/* 'default' enter sequence for state Drink Selection */
	private void enterSequence_main_region_Cancellable_Drink_Drink_Selection_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Cancellable_Drink_Drink_Selection;
	}
	
	/* 'default' enter sequence for state Payment Selection  */
	private void enterSequence_main_region_Cancellable_Payment_Payment_Selection__default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Cancellable_Payment_Payment_Selection_;
	}
	
	/* 'default' enter sequence for state Payed */
	private void enterSequence_main_region_Cancellable_Payment_Payed_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Cancellable_Payment_Payed;
	}
	
	/* 'default' enter sequence for state Coins */
	private void enterSequence_main_region_Cancellable_Payment_Coins_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Cancellable_Payment_Coins;
	}
	
	/* 'default' enter sequence for state Timer */
	private void enterSequence_main_region_Cancellable_Timer_Timer_default() {
		entryAction_main_region_Cancellable_Timer_Timer();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Cancellable_Timer_Timer;
	}
	
	/* 'default' enter sequence for state Preparation */
	private void enterSequence_main_region_Preparation_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Preparation;
	}
	
	/* 'default' enter sequence for state Drink available */
	private void enterSequence_main_region_Drink_available_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Drink_available;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Drink */
	private void enterSequence_main_region_Cancellable_Drink_default() {
		react_main_region_Cancellable_Drink__entry_Default();
	}
	
	/* 'default' enter sequence for region Payment */
	private void enterSequence_main_region_Cancellable_Payment_default() {
		react_main_region_Cancellable_Payment__entry_Default();
	}
	
	/* 'default' enter sequence for region Timer */
	private void enterSequence_main_region_Cancellable_Timer_default() {
		react_main_region_Cancellable_Timer__entry_Default();
	}
	
	/* Default exit sequence for state Ready */
	private void exitSequence_main_region_Ready() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Cancellable */
	private void exitSequence_main_region_Cancellable() {
		exitSequence_main_region_Cancellable_Drink();
		exitSequence_main_region_Cancellable_Payment();
		exitSequence_main_region_Cancellable_Timer();
	}
	
	/* Default exit sequence for state Drink Selection */
	private void exitSequence_main_region_Cancellable_Drink_Drink_Selection() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Payment Selection  */
	private void exitSequence_main_region_Cancellable_Payment_Payment_Selection_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Payed */
	private void exitSequence_main_region_Cancellable_Payment_Payed() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Coins */
	private void exitSequence_main_region_Cancellable_Payment_Coins() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Timer */
	private void exitSequence_main_region_Cancellable_Timer_Timer() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_main_region_Cancellable_Timer_Timer();
	}
	
	/* Default exit sequence for state Preparation */
	private void exitSequence_main_region_Preparation() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Drink available */
	private void exitSequence_main_region_Drink_available() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Ready:
			exitSequence_main_region_Ready();
			break;
		case main_region_Cancellable_Drink_Drink_Selection:
			exitSequence_main_region_Cancellable_Drink_Drink_Selection();
			break;
		case main_region_Preparation:
			exitSequence_main_region_Preparation();
			break;
		case main_region_Drink_available:
			exitSequence_main_region_Drink_available();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_Cancellable_Payment_Payment_Selection_:
			exitSequence_main_region_Cancellable_Payment_Payment_Selection_();
			break;
		case main_region_Cancellable_Payment_Payed:
			exitSequence_main_region_Cancellable_Payment_Payed();
			break;
		case main_region_Cancellable_Payment_Coins:
			exitSequence_main_region_Cancellable_Payment_Coins();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Cancellable_Timer_Timer:
			exitSequence_main_region_Cancellable_Timer_Timer();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Drink */
	private void exitSequence_main_region_Cancellable_Drink() {
		switch (stateVector[0]) {
		case main_region_Cancellable_Drink_Drink_Selection:
			exitSequence_main_region_Cancellable_Drink_Drink_Selection();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Payment */
	private void exitSequence_main_region_Cancellable_Payment() {
		switch (stateVector[1]) {
		case main_region_Cancellable_Payment_Payment_Selection_:
			exitSequence_main_region_Cancellable_Payment_Payment_Selection_();
			break;
		case main_region_Cancellable_Payment_Payed:
			exitSequence_main_region_Cancellable_Payment_Payed();
			break;
		case main_region_Cancellable_Payment_Coins:
			exitSequence_main_region_Cancellable_Payment_Coins();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Timer */
	private void exitSequence_main_region_Cancellable_Timer() {
		switch (stateVector[2]) {
		case main_region_Cancellable_Timer_Timer:
			exitSequence_main_region_Cancellable_Timer_Timer();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Ready_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Cancellable_Drink__entry_Default() {
		enterSequence_main_region_Cancellable_Drink_Drink_Selection_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Cancellable_Payment__entry_Default() {
		enterSequence_main_region_Cancellable_Payment_Payment_Selection__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Cancellable_Timer__entry_Default() {
		enterSequence_main_region_Cancellable_Timer_Timer_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync0() {
		sCInterface.raiseDoRefoundMoney();
		
		sCInterface.raiseDoStartingPreparation();
		
		enterSequence_main_region_Preparation_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Ready_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.selectType) {
				exitSequence_main_region_Ready();
				sCInterface.raiseDoTypeSelection(sCInterface.getSelectTypeValue());
				
				sCInterface.setPrice(sCInterface.getSelectTypeValue());
				
				enterSequence_main_region_Cancellable_default();
				react();
			} else {
				if (sCInterface.coinSlot) {
					exitSequence_main_region_Ready();
					sCInterface.setBalance(sCInterface.getCoinSlotValue());
					
					enterSequence_main_region_Cancellable_Drink_default();
					enterSequence_main_region_Cancellable_Payment_Coins_default();
					enterSequence_main_region_Cancellable_Timer_default();
					react();
				} else {
					if (sCInterface.nFC) {
						exitSequence_main_region_Ready();
						sCInterface.raiseDoSaveInformations();
						
						enterSequence_main_region_Cancellable_Drink_default();
						enterSequence_main_region_Cancellable_Payment_Payed_default();
						enterSequence_main_region_Cancellable_Timer_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Cancellable_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Cancellable_Drink_Drink_Selection_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.selectType) {
				exitSequence_main_region_Cancellable_Drink_Drink_Selection();
				sCInterface.raiseDoTypeSelection(sCInterface.getSelectTypeValue());
				
				sCInterface.setPrice(sCInterface.getSelectTypeValue());
				
				enterSequence_main_region_Cancellable_Drink_Drink_Selection_default();
			} else {
				if ((sCInterface.getPrice()>=0 && isStateActive(State.main_region_Cancellable_Payment_Payed))) {
					exitSequence_main_region_Cancellable();
					react_main_region__sync0();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Cancellable_Payment_Payment_Selection__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.nFC) {
				exitSequence_main_region_Cancellable_Payment_Payment_Selection_();
				sCInterface.raiseDoSaveInformations();
				
				enterSequence_main_region_Cancellable_Payment_Payed_default();
			} else {
				if (sCInterface.coinSlot) {
					exitSequence_main_region_Cancellable_Payment_Payment_Selection_();
					sCInterface.setBalance(sCInterface.getBalance() + (sCInterface.getCoinSlotValue()));
					
					enterSequence_main_region_Cancellable_Payment_Coins_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Cancellable_Payment_Payed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((isStateActive(State.main_region_Cancellable_Drink_Drink_Selection) && sCInterface.getPrice()>=0)) {
				exitSequence_main_region_Cancellable();
				react_main_region__sync0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Cancellable_Payment_Coins_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.coinSlot) {
				exitSequence_main_region_Cancellable_Payment_Coins();
				sCInterface.setBalance(sCInterface.getBalance() + (sCInterface.getCoinSlotValue()));
				
				enterSequence_main_region_Cancellable_Payment_Coins_default();
			} else {
				if (((sCInterface.getBalance() - sCInterface.getPrice())>=0 && sCInterface.getPrice()>=0)) {
					exitSequence_main_region_Cancellable_Payment_Coins();
					enterSequence_main_region_Cancellable_Payment_Payed_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Cancellable_Timer_Timer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.selectType || (sCInterface.sliderSugar || (sCInterface.sliderSize || (sCInterface.sliderTemperature || (sCInterface.coinSlot || sCInterface.nFC)))))) {
				exitSequence_main_region_Cancellable_Timer_Timer();
				enterSequence_main_region_Cancellable_Timer_Timer_default();
				main_region_Cancellable_react(false);
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Cancellable();
					sCInterface.raiseDoReset();
					
					enterSequence_main_region_Ready_default();
					react();
				} else {
					if (sCInterface.cancelButton) {
						exitSequence_main_region_Cancellable();
						sCInterface.raiseDoReset();
						
						enterSequence_main_region_Ready_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Cancellable_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.preparationFinished) {
				exitSequence_main_region_Preparation();
				sCInterface.raiseDoDrinkCollectable();
				
				enterSequence_main_region_Drink_available_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Drink_available_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.drinkCollected) {
				exitSequence_main_region_Drink_available();
				sCInterface.raiseDoCleanSystem();
				
				enterSequence_main_region_Ready_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
